// Display Types
//
//   ||||    ||  /==\  ||==\  ||      ||   ||  ||
//   ||  ||  ||   \\   ||==/  ||     |==|    ||
//   ||||    ||  \==/  ||     ||||  ||  ||   ||
// 

@mixin row($justify: start, $align: center, $wrap: wrap) {
    display: flex;
    flex-flow: row $wrap;

    justify-content: $justify;
    align-items: $align;
}

@mixin column($justify: center, $align: start, $wrap: wrap) {
    display: flex;
    flex-flow: column $wrap;

    justify-content: $justify;
    align-items: $align;
}

@mixin grid($columns: 1, $rows: 1) {
    display: grid;
    grid-template-columns: repeat($columns, 1fr);
    grid-template-rows: repeat($rows, 1fr);
}



// Spacing
//
//   /==\  ||==\    ||    /==\  ||  || ||  /==
//    \\   ||==/   |==|   ||    ||  ||\||  || _
//   \==/  ||     ||  ||  \==/  ||  || ||  \==/
//

@mixin gap($first: false, $second: false, $column: false, $row: false) {
    --size-0: 0;
    --size-none: 0;
    --size-small: 0.25rem;
    --size-medium: 0.5rem;
    --size-large: 0.75rem;
    --size-x-large: 1rem;
    --size-default: var(--size-medium);

    // None defined: apply default gap
    @if not $first and not $second and not $column and not $row {
        gap: var(--size-default);
    }

    // First defined: set both gaps to first
    @else if $first and not $second and not $column and not $row {
        gap: var(--size-#{$first});
    }

    // First and second defined: set both gaps respectively
    @else if $first and $second and not $column and not $row {
        gap: var(--size-#{$first}) var(--size-#{$second});
    }

    @else {

        // If column: set column
        @if $column {
            column-gap: var(--size-#{$column});
        }

        // If row: set row
        @if $row {
            row-gap: var(--size-#{$row});
        }
    }
}

@mixin padding($top: false, $right: false, $bottom: false, $left: false) {
    --size-0: 0;
    --size-none: 0;
    --size-x-small: 0.15rem;
    --size-small: 0.25rem;
    --size-medium: 0.5rem;
    --size-large: 0.75rem;
    --size-x-large: 1rem;
    --size-default: var(--size-medium);

    // None defined: apply default padding
    @if not $top and not $right and not $bottom and not $left {
        padding: var(--size-default);
    }

    // Four defined: apply to all sides
    @else if $top and $right and $bottom and $left {
        padding: var(--size-#{$top}) var(--size-#{$right}) var(--size-#{$bottom}) var(--size-#{$left});
    }

    // Three defined: error
    @else if $top and $right and $bottom and not $left {
        @error "Three padding values are not supported";
    }

    // Two defined: apply up down and side
    @else if $top and $right and not $bottom and not $left {
        padding: var(--size-#{$top}) var(--size-#{$right});
    }

    // One defined: apply to all sides
    @else if $top and not $right and not $bottom and not $left {
        padding: var(--size-#{$top});
    }

    @else {
        @error "Invalid padding values. Only use positional arguments";
    }
}

@mixin margin($top: false, $right: false, $bottom: false, $left: false) {
    --size-0: 0;
    --size-none: 0;
    --size-x-small: 0.15rem;
    --size-small: 0.25rem;
    --size-medium: 0.5rem;
    --size-large: 0.75rem;
    --size-x-large: 1rem;
    --size-default: var(--size-medium);

    // None defined: apply default margin
    @if not $top and not $right and not $bottom and not $left {
        margin: var(--size-default);
    }

    // Four defined: apply to all sides
    @else if $top and $right and $bottom and $left {
        margin: var(--size-#{$top}) var(--size-#{$right}) var(--size-#{$bottom}) var(--size-#{$left});
    }

    // Three defined: error
    @else if $top and $right and $bottom and not $left {
        @error "Three margin values are not supported";
    }

    // Two defined: apply up down and side
    @else if $top and $right and not $bottom and not $left {
        margin: var(--size-#{$top}) var(--size-#{$right});
    }

    // One defined: apply to all sides
    @else if $top and not $right and not $bottom and not $left {
        margin: var(--size-#{$top});
    }

    @else {
        @error "Invalid margin values. Only use positional arguments";
    }
}



// Sizing
//
//   /==\  ||  |||||  ||  || ||  /==
//    \\   ||    /    ||  ||\||  || _
//   \==/  ||  |||||  ||  || ||  \==/
//

@mixin percent-width($margin: medium) {
    @if $margin ==small {
        width: 90%;
    }

    @else if $margin ==large {
        width: 70%;
    }

    @else if $margin ==x-large {
        width: 60%;
    }

    // Medium and default case
    @else {
        width: 80%;
    }
}



// Text
// 
//   ||||||  ||==  ||  ||  ||||||
//     ||    ||==    ||      ||
//     ||    ||==  ||  ||    ||
//

@mixin text-size($size: medium) {
    @if $size ==small {
        font-size: 0.75rem;
    }

    @else if $size ==large {
        font-size: 1.25rem;
    }

    @else if $size ==x-large {
        font-size: 1.5rem;
    }

    // Medium and default case
    @else {
        font-size: 1rem;
    }
}

@mixin bold() {
    font-weight: bold;
}

@mixin italic() {
    font-style: italic;
}



// Functions
//
//   ||==  || ||  || ||  /==\  ||||||  ||   /==\   || ||  /==\                                                                                                                                                   
//   ||==  || ||  ||\||  ||      ||    ||  ||  ||  ||\||   \\                                                                                                                                               
//   ||     |||   || ||  \==/    ||    ||   \==/   || ||  \==/                                                                                                                                         
//

@mixin icon($size: medium, $hover: false) {

    @if $size ==x-small {
        height: 1.2rem;
        width: 1.2rem;
    }

    @else if $size ==small {
        height: 2rem;
        width: 2rem;
    }

    @else if $size ==large {
        height: 4rem;
        width: 4rem;
    }

    // Medium and default case
    @else {
        height: 2.7rem;
        width: 2.7rem;
    }

    aspect-ratio: 1/1;

    user-select: none;
    
    &>* {
        height: 100%;
        width: 100%;
        
        user-select: none;

        // Make the black, base icon, white
        filter: invert(100%) sepia(0%) saturate(0%) hue-rotate(290deg) brightness(104%) contrast(104%);

        @if $hover {
            &:active {
                @include dim();
            }
        }
    }
}

@mixin hairline($position, $thickness: 0.02rem) {
    border-#{$position}: solid $thickness var(--color-gray);
}

@mixin dim() {
    opacity: 0.6;
}